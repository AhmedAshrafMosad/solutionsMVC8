@model SchoolManagement.Models.Course
@{
    ViewData["Title"] = "Edit Course";
}

@section Styles {
    <style>
        .card {
            border-radius: 10px;
            border: none;
        }

        .card-header {
            border-radius: 10px 10px 0 0 !important;
        }

        .btn-warning {
            background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);
            border: none;
            color: #000;
            font-weight: 600;
        }

            .btn-warning:hover {
                background: linear-gradient(135deg, #e0a800 0%, #c79100 100%);
                transform: translateY(-1px);
            }

        .form-control:focus, .form-select:focus {
            border-color: #ffc107;
            box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.25);
        }
    </style>
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-warning text-white">
                    <h4 class="mb-0">
                        <i class="bi bi-pencil-square me-2"></i>Edit Course
                    </h4>
                </div>
                <div class="card-body">
                    <form asp-action="Edit" method="post" id="editForm">
                        <input type="hidden" asp-for="Id" />

                        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                        <div class="form-group mb-3">
                            <label asp-for="Name" class="form-label">Course Name</label>
                            <input asp-for="Name" class="form-control" />
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Degree" class="form-label">Degree Level</label>
                            <input asp-for="Degree" class="form-control" />
                            <span asp-validation-for="Degree" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="MgrName" class="form-label">Manager Name</label>
                            <input asp-for="MgrName" class="form-control" />
                            <span asp-validation-for="MgrName" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="DepartmentId" class="form-label">Department</label>
                            <select asp-for="DepartmentId" class="form-select" asp-items="ViewBag.Departments">
                                <option value="">-- Select Department --</option>
                            </select>
                            <span asp-validation-for="DepartmentId" class="text-danger"></span>
                        </div>

                        <div class="d-flex gap-2 justify-content-end mt-4">
                            <button type="submit" class="btn btn-warning">
                                <i class="bi bi-check-lg me-1"></i>Update Course
                            </button>
                            <a asp-action="GetAll" class="btn btn-secondary">
                                <i class="bi bi-x-circle me-1"></i>Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('editForm');

            // Real-time validation
            const inputs = form.querySelectorAll('input, select');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    validateField(this);
                });

                input.addEventListener('input', function() {
                    if (this.classList.contains('is-invalid')) {
                        validateField(this);
                    }
                });
            });

            function validateField(field) {
                if (field.checkValidity()) {
                    field.classList.remove('is-invalid');
                    field.classList.add('is-valid');
                } else {
                    field.classList.remove('is-valid');
                    field.classList.add('is-invalid');
                }
            }

            // Enhanced form submission
            form.addEventListener('submit', function(e) {
                let isValid = true;

                inputs.forEach(input => {
                    validateField(input);
                    if (!input.checkValidity()) {
                        isValid = false;
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    // Scroll to first invalid field
                    const firstInvalid = form.querySelector('.is-invalid');
                    if (firstInvalid) {
                        firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
            });
        });
    </script>
}